#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 17 15:40:00 2018

@author: rcasero
"""

import os
import glob
import keras
import keras.backend as K
import keras.preprocessing.image
import importlib
import numpy as np
import cytometer.models as models
from PIL import Image
import matplotlib.pyplot as plt

# load module dependencies
#import datetime


os.environ['KERAS_BACKEND'] = 'tensorflow'

# different versions of conda keep the path in different variables
if 'CONDA_ENV_PATH' in os.environ:
    conda_env_path = os.environ['CONDA_ENV_PATH']
elif 'CONDA_PREFIX' in os.environ:
    conda_env_path = os.environ['CONDA_PREFIX']
else:
    conda_env_path = '.'

os.environ['PYTHONPATH'] = os.path.join(os.environ['HOME'], 'Software', 'cytometer', 'cytometer') \
                           + ':' + os.environ['PYTHONPATH']

# configure Keras, to avoid using file ~/.keras/keras.json
K.set_image_dim_ordering('tf')
K.set_floatx('float32')
K.set_epsilon(1e-07)
# fix "RuntimeError: Invalid DISPLAY variable" in cluster runs
# import matplotlib
# matplotlib.use('agg')

# DEBUG: used while developing the software, not for production
importlib.reload(models)

"""
Data
"""

def load_list_of_files(file_list):
    Nfiles = len(file_list)
    file_list.sort()
    im = np.array(Image.open(file_list[0]))
    data = np.zeros((Nfiles,) + im.shape, dtype=im.dtype)
    data[0, ] = im
    for i, filename in enumerate(file_list[1:]):
        im = Image.open(filename)
        data[i+1, ] = im
    return data


# load Lorna's hand segmented data
data_dir = os.path.join('data', 'adipocyte_500x500_patches')
data_im = load_list_of_files(glob.glob(os.path.join(data_dir, '*_rgb.tif')))
data_seg = load_list_of_files(glob.glob(os.path.join(data_dir, '*_seg.tif')))

# display the training data
plt.ion()
for i in range(data_im.shape[0]):
    plt.subplot(1, 2, 1)
    plt.imshow(data_im[i, ])
    plt.subplot(1, 2, 2)
    plt.imshow(data_seg[i, ])
    plt.draw_all()
    print('i = ' + str(i))
    plt.pause(0.1)
    input('Press key to continue')

# convert hand segmentation from uint8 to categorical binary data
data_seg_cat = keras.utils.to_categorical(data_seg)

"""
Keras model
"""

# parameters
batch_size = 5
n_epoch = 25

# rate scheduler from DeepCell
def rate_scheduler(lr = .001, decay = 0.95):
    def output_fn(epoch):
        epoch = np.int(epoch)
        new_lr = lr * (decay ** epoch)
        return new_lr
    return output_fn


model = models.basic_9c3mp()
optimizer = keras.optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=optimizer,
              metrics=['accuracy'])

# DEBUG: model visualisation
model.summary()
from keras.utils import plot_model
plot_model(model, to_file='/tmp/model.png', show_shapes=True)

# data augmentation
train_datagen = keras.preprocessing.image.ImageDataGenerator(
    rotation_range=90,  # randomly rotate images up to 90 degrees
    horizontal_flip=True,  # randomly flip images
    vertical_flip=True)  # randomly flip images

train_generator = train_datagen.flow(
    (data_im, data_seg_cat),
    batch_size=batch_size)

## https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html

# fit the model on the batches generated by datagen.flow()
loss_history = model.fit_generator(data_gen.flow(data_im, batch_size=batch_size),
                                   steps_per_epoch=1,
                                   epochs=n_epoch)

# set seed of random number generator so that we can reproduce results
seed = 0
np.random.seed(seed)




# save trained model
model.save(file_name_save_loss)
